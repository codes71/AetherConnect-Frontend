
# Aetherconnect Backend Architecture

This document provides a detailed overview of the Aetherconnect backend architecture for the frontend development team.

## 1. High-Level Overview

The backend is built using a microservices architecture. Each service is a containerized NestJS application. The main services are:

-   **API Gateway**: The single entry point for all client-side HTTP requests. It handles routing, authentication, and rate limiting.
-   **Auth Service**: Manages user authentication, registration, and user profiles.
-   **Message Service**: Handles real-time messaging via WebSockets, message persistence, and room management.
-   **PostgreSQL**: A relational database for the Auth Service.
-   **Redis**: An in-memory data store used for the WebSocket adapter to enable multi-instance communication.

## 2. Service Details

| Service           | Host Port | Internal Port(s) | Description                                                                                                                              |
| ----------------- | --------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| API Gateway       | `3000`*   | `3000` (HTTP)    | Main entry point for all REST API calls from the frontend. Handles routing, authentication, rate limiting, and WebSocket proxying.        |
| Auth Service      | `3002`*   | `50001` (gRPC)   | Handles user authentication and data via gRPC. Also exposes HTTP port for health checks. Not directly accessible from the frontend.     |
| Message Service   | `3001`*   | `3001` (HTTP/WS) | Handles WebSocket connections for real-time messaging via Socket.IO. Also exposes gRPC port for internal communication with API Gateway. |
| PostgreSQL        | `5433`    | `5432`           | Database for the Auth Service.                                                                                                           |
| Redis             | `6379`    | `6379`           | Used by the Message Service for WebSocket scaling.                                                                                       |

*Ports are configurable via environment variables: `API_GATEWAY_PORT`, `AUTH_SERVICE_HTTP_PORT`, `MESSAGE_SERVICE_HTTP_PORT`

## 3. Authentication Flow

Authentication is JWT-based with Bearer tokens. Access tokens are issued upon successful login or registration and must be included in the `Authorization` header for all protected requests.

### 🔑 JWT Security Strategy

The backend implements a resilient JWT security strategy with the following features:

-   **Long-Lived Access Tokens**: 30-day expiry reduces need for frequent re-authentication
-   **Dual-Secret Validation**: Supports both regular JWTs and WebSocket tokens with different secrets
-   **Optional Redis Blacklisting**: Redis blacklist optional when `REDIS_ENABLED=false`
-   **Stateless Authentication**: JWTs enable stateless auth, ideal for microservices
-   **Graceful Failover**: System works without Redis, logs warnings but continues operation

1.  **Registration**: `POST /api/auth/register`
    -   The frontend sends user registration data.
    -   The API Gateway forwards this to the Auth Service.
    -   On success, an `accessToken` is returned in the response body.

2.  **Login**: `POST /api/auth/login`
    -   The frontend sends user credentials.
    -   The API Gateway validates them with the Auth Service.
    -   On success, an `accessToken` (30-day expiry) is returned in the response body.

3.  **Authenticated Requests**:
    -   For any subsequent HTTP request to a protected endpoint, the frontend must include the `accessToken` in the `Authorization` header as a Bearer token (e.g., `Authorization: Bearer <accessToken>`).
    -   The API Gateway validates this token against the Auth Service and checks if it's blacklisted.

4.  **Logout**: `POST /api/auth/logout` ⚡ **SECURITY ENHANCED**
    -   **Requires Authentication**: Must include a valid `accessToken` in the `Authorization` header.
    -   **Backend Invalidation**: The `accessToken` is added to a Redis blacklist, immediately revoking its access.
    -   **Complete Security**: Even if an attacker has stolen an active token, logout renders it useless.

### 🔒 Security Features (Sept 2025 Update)

-   **Logout Invalidation**: Access tokens are blacklisted in Redis upon logout.
-   **Stateless Tokens**: No refresh tokens are used; access tokens are long-lived.

## 4. WebSocket Communication

1.  **Get WebSocket Token**:
    -   Before establishing a WebSocket connection, the frontend must get a temporary WebSocket token.
    -   Make a `GET` request to `/api/auth/ws-token` (this is a protected route, so a valid `accessToken` in the `Authorization` header is required).
    -   This will return a short-lived token in the response body.

2.  **Connect to WebSocket Server**:
    -   Connect to the API Gateway at `ws://localhost:3000` (WebSocket proxy routes through `/socket`).
    -   Pass the WebSocket token in the `auth` payload of the Socket.io client:
        ```javascript
        import { io } from "socket.io-client";

        const wsToken = "your_ws_token_from_api";

        const socket = io("http://localhost:3000", {
          path: "/socket",  // WebSocket proxy path
          auth: {
            token: wsToken,
          },
        });
        ```

3.  **WebSocket Events**:
    -   **Listen for `connected`**: On successful connection.
    -   **Listen for `error`**: If the connection fails or an error occurs.
    -   **Emit `join_room`**: To join a chat room. Payload: `{ roomId: string }`.
    -   **Listen for `new_message`**: When a new message is received.
    -   **Emit `send_message`**: To send a message. Payload: `{ roomId: string, content: string }`.
    -   **Emit `typing_start` / `typing_stop`**: For typing indicators. Payload: `{ roomId: string }`.

## 5. API Endpoints (API Gateway)

-   `POST /api/auth/register`: Create a new user.
    -   **Success Response (201)**
        ```json
        {
          "success": true,
          "message": "User created successfully",
          "user": {
            "id": "1",
            "username": "john_doe",
            "email": "john@example.com",
            "firstName": "John",
            "lastName": "Doe",
            "name": "John Doe",
            "roles": ["user"],
            "createdAt": "2023-10-27T10:00:00.000Z",
            "updatedAt": "2023-10-27T10:00:00.000Z"
          }
        }
        ```
    -   **Error Response (400)**
        ```json
        {
          "success": false,
          "message": "User with this email or username already exists"
        }
        ```

-   `POST /api/auth/login`: Log in and get auth token.
    -   **Success Response (200)**
        ```json
        {
          "success": true,
          "message": "Login successful",
          "user": { ... },
          "accessToken": "..."
        }
        ```
    -   **Error Response (401)**
        ```json
        {
          "success": false,
          "message": "Invalid credentials"
        }
        ```

-   `POST /api/auth/logout`: Log out and invalidate access token. ⚡ **SECURITY ENHANCED**
    -   **Authentication Required**: Must include valid `accessToken` in `Authorization` header.
    -   **Backend Token Invalidation**: Access token is added to a Redis blacklist.
    -   **Success Response (200)**
        ```json
        {
          "success": true,
          "message": "Logged out successfully"
        }
        ```
    -   **Error Response (401)** - If not authenticated or token is invalid
        ```json
        {
          "success": false,
          "message": "Unauthorized"
        }
        ```

-   `GET /api/auth/ws-token`: (Protected) Get a temporary token for WebSocket connection.
    -   **Success Response (200)**
        ```json
        {
          "success": true,
          "token": "your_short_lived_ws_token"
        }
        ```
    -   **Error Response (401)**
        ```json
        {
          "statusCode": 401,
          "message": "Unauthorized"
        }
        ```

-   `GET /api/auth/profile`: (Protected) Get the current user's profile.
    -   **Success Response (200)**
        ```json
        {
          "success": true,
          "message": "User profile retrieved successfully",
          "user": { ... }
        }
        ```
    -   **Error Response (401)**
        ```json
        {
          "statusCode": 401,
          "message": "Unauthorized"
        }
        ```

-   `PUT /api/auth/profile`: (Protected) Update the current user's profile.
    -   **Success Response (200)**
        ```json
        {
          "success": true,
          "message": "User profile updated successfully",
          "user": { ... }
        }
        ```
    -   **Error Response (400)**
        ```json
        {
          "success": false,
          "message": "Failed to update user profile"
        }
        ```

-   `GET /api/rooms`: (Protected) Get all rooms for the current user.
    -   **Success Response (200)**
        ```json
        {
          "success": true,
          "message": "Rooms retrieved successfully",
          "rooms": [
            {
              "id": "635a5e3b8bb9e8b3c8e9f5d2",
              "name": "general",
              "description": "General discussion room",
              "roomType": "public",
              "createdBy": "system",
              "members": ["1", "2"],
              "createdAt": "2023-10-27T10:00:00.000Z",
              "updatedAt": "2023-10-27T10:00:00.000Z"
            }
          ]
        }
        ```
    -   **No Rooms Joined Response (200)**
        ```json
        {
          "success": true,
          "message": "No rooms joined yet.",
          "rooms": []
        }
        ```

-   `GET /api/rooms/:roomId/messages`: (Protected) Get message history for a room.
    -   **Success Response (200)**
        ```json
        {
          "success": true,
          "message": "Message history retrieved successfully",
          "messages": [
            {
              "id": "635a5e3b8bb9e8b3c8e9f5d3",
              "userId": "1",
              "username": "John Doe",
              "roomId": "635a5e3b8bb9e8b3c8e9f5d2",
              "content": "Hello, world!",
              "messageType": "text",
              "metadata": null,
              "createdAt": "2023-10-27T10:01:00.000Z",
              "updatedAt": "2023-10-27T10:01:00.000Z"
            }
          ],
          "pagination": {
            "currentPage": 1,
            "totalPages": 1,
            "totalItems": 1,
            "itemsPerPage": 50,
            "hasNext": false,
            "hasPrevious": false
          }
        }
        ```
    -   **Error Response (404)**
        ```json
        {
          "success": false,
          "message": "Room not found"
        }
        ```

## 6. Backend Architecture Diagram

```
🔐 AetherConnect Backend Architecture
══════════════════════════════════════

┌─────────────────┐         ┌─────────────────────┐
│   CLIENT        │────────►│  API GATEWAY       │
│  (localhost:3004)│   JWT  │  (localhost:3000) │
└─────────────────┘ Bearer  │                     │
                            │  ├─ JWT Guard       │
                            │  ├─ Rate Limiting   │
                            │  ├─ CORS            │
                            │  └─ WS Proxy (/socket)
                            └─────────────────────┘
                                      │
                   ┌──────────────────┼──────────────────┐
                  JWT                 │                 gRPC
               Bearer ┌───────────────▼─────────────┐ gRPC ┌─────────────────┐
               Token  │    AUTH SERVICE             │      │  MESSAGE        │
                      │  (localhost:50001 gRPC)     │◄─────►│  SERVICE       │
                      │                             │      │  (localhost:   │
                      │  ├─ User Registration       │      │     50002)     │
                      │  ├─ JWT Access Tokens       │      │                 │
                      │  ├─ WS Token Generation     │      │  ├─ WS Auth     │
                      │  ├─ Optional Redis Blacklist│      │  ├─ Room Mgmt   │
                      │  └─ PostgreSQL Storage      │      │  ├─ Messages    │
                      └──────────────┬──────────────┘      │  ├─ Socket.IO   │
                                     │                     │  └─ MongoDB     │
                                     ▼                     └─────────────────┘
                            ┌─────────────────┐                    │
                            │  POSTGRESQL     │                    ▼
                            │  (localhost:5433)│           ┌─────────────────┐
                            │                 │           │   MONGODB        │
                            │  ├─ User Data     │           │   ATLAS          │
                            │  └─ User Sessions │           │                 │
                            └─────────────────┘           │  ├─ Messages       │
                                                         │  ├─ Rooms          │
                                                         │  └─ Participants   │
                                                         └─────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                           OPTIONAL COMPONENTS                               │
├─────────────────────────────────────────────────────────────────────────────┤
│  ┌─────────────────┐                     ┌─────────────────┐               │
│  │     REDIS       │                     │   FRONTEND       │               │
│  │  (localhost:6379│             ┌──────►│  (localhost:3004)│               │
│  │  OR Upstash)    │◄───┐        │       └─────────────────┘               │
│  │                 │    │        │                                               │
│  │  ├─ JWT Blacklist│    └────────┘                                               │
│  │  └─ WS Scaling   │    Logout Blacklisting (Optional, logs warning if                                   │
│  └─────────────────┘    unavailable and continues)                                          │
└─────────────────────────────────────────────────────────────────────────────┘

║ SERVICE PORTS ║
═══════════════════
┌─ API Gateway ──► :3000 (HTTP/WebSocket)
├─ Auth Service ──► :50001 (gRPC)
├─ Message Svc ───► :3001 (HTTP/WS) + :50002 (gRPC)
├─ PostgreSQL ────► :5433
└─ Redis ─────────► :6379

* Ports configurable via environment variables:
  - API_GATEWAY_PORT=3000
  - AUTH_SERVICE_GRPC_PORT=50001
  - MESSAGE_SERVICE_HTTP_PORT=3001
  - MESSAGE_SERVICE_GRPC_PORT=50002

║ AUTHENTICATION FLOW ║
═════════════════════════
1. REGISTER/LOGIN → JWT Access Token (30 days) returned
2. HTTP REQUESTS → Include "Authorization: Bearer <token>" header
3. WS CONNECT → Get WS token, connect via API Gateway proxy
4. LOGOUT → Token blacklisted (Redis optional, graceful failure)
5. VALIDATE → Dual secret check (access + WS tokens)
```
